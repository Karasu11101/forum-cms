server.port=80
server.servlet.context-path=/gestioneforum
spring.datasource.url=${PGDBURL}
spring.datasource.username=${PGUSER}
spring.datasource.password=${PGPASSWORD}
spring.datasource.initialization-mode=always


#Tomcat Data Source Default Isolation Level
##1. Read uncommitted
##2. Read committed
##3. Repeatable read
##4. Serializable
spring.datasource.tomcat.default-transaction-isolation=2

#Note: spring.jpa.properties.hibernate.connection.release_mode= after_statement or after_transaction
spring.jpa.properties.hibernate.connection.release_mode=after_transaction
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false

# 1 - Batching objects of the same Entity and objects of different
# entities. Imagine to persist and update multiple different entities.

# 2 - JDBC batch can target one table only, so every new DML statement
# targeting a different table ends up the current batch and initiates a
# new one:
spring.jpa.properties.hibernate.jdbc.batch_size=20

# 3 - Hibernate can sort INSERT and UPDATE statements.
# While the EntityA objects and EntityB objects INSERT statements are
# batched accordingly,the UPDATE statements are still executed separately.
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true

# 4 - There's the hibernate.jdbc.batch_versioned_data configuration
# property we need to set, in order to enable UPDATE batching:
spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true

spring.jpa.properties.hibernate.jdbc.fetch_size=50

# Enable nullability checking. Raises an exception if a property
# marked as not-null is null. Default to false if Bean Validation
# is present in the classpath and Hibernate Annotations is used,
# true otherwise.
spring.jpa.properties.hibernate.check_nullability=true